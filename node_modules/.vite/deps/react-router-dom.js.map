{
  "version": 3,
  "sources": ["../../react-router-dom/dom.ts", "../../react-router-dom/index.tsx", "../../react-router-dom/dist/main.js"],
  "sourcesContent": ["import type {\n  FormEncType,\n  HTMLFormMethod,\n  RelativeRoutingType,\n} from \"@remix-run/router\";\nimport { stripBasename, UNSAFE_warning as warning } from \"@remix-run/router\";\n\nexport const defaultMethod: HTMLFormMethod = \"get\";\nconst defaultEncType: FormEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams | null\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  if (defaultSearchParams) {\n    // Use `defaultSearchParams.forEach(...)` here instead of iterating of\n    // `defaultSearchParams.keys()` to work-around a bug in Firefox related to\n    // web extensions. Relevant Bugzilla tickets:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1414602\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1023984\n    defaultSearchParams.forEach((_, key) => {\n      if (!searchParams.has(key)) {\n        defaultSearchParams.getAll(key).forEach((value) => {\n          searchParams.append(key, value);\n        });\n      }\n    });\n  }\n\n  return searchParams;\n}\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\nexport type SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | JsonValue\n  | null;\n\n// One-time check for submitter support\nlet _formDataSupportsSubmitter: boolean | null = null;\n\nfunction isFormDataSubmitterSupported() {\n  if (_formDataSupportsSubmitter === null) {\n    try {\n      new FormData(\n        document.createElement(\"form\"),\n        // @ts-expect-error if FormData supports the submitter parameter, this will throw\n        0\n      );\n      _formDataSupportsSubmitter = false;\n    } catch (e) {\n      _formDataSupportsSubmitter = true;\n    }\n  }\n  return _formDataSupportsSubmitter;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   */\n  action?: string;\n\n  /**\n   * The encoding used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * In browser-based environments, prevent resetting scroll after this\n   * navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * Enable flushSync for this navigation's state updates\n   */\n  unstable_flushSync?: boolean;\n\n  /**\n   * Enable view transitions on this submission navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\nconst supportedFormEncTypes: Set<FormEncType> = new Set([\n  \"application/x-www-form-urlencoded\",\n  \"multipart/form-data\",\n  \"text/plain\",\n]);\n\nfunction getFormEncType(encType: string | null) {\n  if (encType != null && !supportedFormEncTypes.has(encType as FormEncType)) {\n    warning(\n      false,\n      `\"${encType}\" is not a valid \\`encType\\` for \\`<Form>\\`/\\`<fetcher.Form>\\` ` +\n        `and will default to \"${defaultEncType}\"`\n    );\n\n    return null;\n  }\n  return encType;\n}\n\nexport function getFormSubmissionInfo(\n  target: SubmitTarget,\n  basename: string\n): {\n  action: string | null;\n  method: string;\n  encType: string;\n  formData: FormData | undefined;\n  body: any;\n} {\n  let method: string;\n  let action: string | null;\n  let encType: string;\n  let formData: FormData | undefined;\n  let body: any;\n\n  if (isFormElement(target)) {\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n    method = target.getAttribute(\"method\") || defaultMethod;\n    encType = getFormEncType(target.getAttribute(\"enctype\")) || defaultEncType;\n\n    formData = new FormData(target);\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    // When grabbing the action from the element, it will have had the basename\n    // prefixed to ensure non-JS scenarios work, so strip it since we'll\n    // re-prefix in the router\n    let attr = target.getAttribute(\"formaction\") || form.getAttribute(\"action\");\n    action = attr ? stripBasename(attr, basename) : null;\n\n    method =\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    encType =\n      getFormEncType(target.getAttribute(\"formenctype\")) ||\n      getFormEncType(form.getAttribute(\"enctype\")) ||\n      defaultEncType;\n\n    // Build a FormData object populated from a form and submitter\n    formData = new FormData(form, target);\n\n    // If this browser doesn't support the `FormData(el, submitter)` format,\n    // then tack on the submitter value at the end.  This is a lightweight\n    // solution that is not 100% spec compliant.  For complete support in older\n    // browsers, consider using the `formdata-submitter-polyfill` package\n    if (!isFormDataSubmitterSupported()) {\n      let { name, type, value } = target;\n      if (type === \"image\") {\n        let prefix = name ? `${name}.` : \"\";\n        formData.append(`${prefix}x`, \"0\");\n        formData.append(`${prefix}y`, \"0\");\n      } else if (name) {\n        formData.append(name, value);\n      }\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = defaultMethod;\n    action = null;\n    encType = defaultEncType;\n    body = target;\n  }\n\n  // Send body for <Form encType=\"text/plain\" so we encode it into text\n  if (formData && encType === \"text/plain\") {\n    body = formData;\n    formData = undefined;\n  }\n\n  return { action, method: method.toLowerCase(), encType, formData, body };\n}\n", "/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport type {\n  DataRouteObject,\n  FutureConfig,\n  Location,\n  NavigateOptions,\n  NavigationType,\n  Navigator,\n  RelativeRoutingType,\n  RouteObject,\n  RouterProviderProps,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  useBlocker,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_mapRouteProperties as mapRouteProperties,\n  UNSAFE_useRouteId as useRouteId,\n  UNSAFE_useRoutesImpl as useRoutesImpl,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  FutureConfig as RouterFutureConfig,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HTMLFormMethod,\n  HydrationState,\n  Router as RemixRouter,\n  V7_FormMethod,\n  RouterState,\n  RouterSubscriber,\n  BlockerFunction,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  joinPaths,\n  stripBasename,\n  UNSAFE_ErrorResponseImpl as ErrorResponseImpl,\n  UNSAFE_invariant as invariant,\n  UNSAFE_warning as warning,\n  matchPath,\n  IDLE_FETCHER,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n  SubmitTarget,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n  V7_FormMethod,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  unstable_Blocker,\n  unstable_BlockerFunction,\n  DataRouteMatch,\n  DataRouteObject,\n  ErrorResponse,\n  Fetcher,\n  FutureConfig,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LazyRouteFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathParam,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  ShouldRevalidateFunctionArgs,\n  To,\n  UIMatch,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  redirectDocument,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useBlocker,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_useRouteId,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n  interface Document {\n    startViewTransition(cb: () => Promise<void> | void): ViewTransition;\n  }\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\ninterface DOMRouterOpts {\n  basename?: string;\n  future?: Partial<Omit<RouterFutureConfig, \"v7_prependBasename\">>;\n  hydrationData?: HydrationState;\n  window?: Window;\n}\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    window: opts?.window,\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: DOMRouterOpts\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    future: {\n      ...opts?.future,\n      v7_prependBasename: true,\n    },\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes,\n    mapRouteProperties,\n    window: opts?.window,\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponseImpl(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      // Attempt to reconstruct the right type of Error (i.e., ReferenceError)\n      if (val.__subType) {\n        let ErrorConstructor = window[val.__subType];\n        if (typeof ErrorConstructor === \"function\") {\n          try {\n            // @ts-expect-error\n            let error = new ErrorConstructor(val.message);\n            // Wipe away the client-side stack trace.  Nothing to fill it in with\n            // because we don't serialize SSR stack traces for security reasons\n            error.stack = \"\";\n            serialized[key] = error;\n          } catch (e) {\n            // no-op - fall through and create a normal Error\n          }\n        }\n      }\n\n      if (serialized[key] == null) {\n        let error = new Error(val.message);\n        // Wipe away the client-side stack trace.  Nothing to fill it in with\n        // because we don't serialize SSR stack traces for security reasons\n        error.stack = \"\";\n        serialized[key] = error;\n      }\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Contexts\n////////////////////////////////////////////////////////////////////////////////\n\ntype ViewTransitionContextObject =\n  | {\n      isTransitioning: false;\n    }\n  | {\n      isTransitioning: true;\n      flushSync: boolean;\n      currentLocation: Location;\n      nextLocation: Location;\n    };\n\nconst ViewTransitionContext = React.createContext<ViewTransitionContextObject>({\n  isTransitioning: false,\n});\nif (__DEV__) {\n  ViewTransitionContext.displayName = \"ViewTransition\";\n}\n\nexport { ViewTransitionContext as UNSAFE_ViewTransitionContext };\n\n// TODO: (v7) Change the useFetcher data from `any` to `unknown`\ntype FetchersContextObject = Map<string, any>;\n\nconst FetchersContext = React.createContext<FetchersContextObject>(new Map());\nif (__DEV__) {\n  FetchersContext.displayName = \"Fetchers\";\n}\n\nexport { FetchersContext as UNSAFE_FetchersContext };\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n  Webpack + React 17 fails to compile on any of the following because webpack\n  complains that `startTransition` doesn't exist in `React`:\n  * import { startTransition } from \"react\"\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React.startTransition(() => setState()) : setState()\n  * import * as React from from \"react\";\n    \"startTransition\" in React ? React[\"startTransition\"](() => setState()) : setState()\n\n  Moving it to a constant such as the following solves the Webpack/React 17 issue:\n  * import * as React from from \"react\";\n    const START_TRANSITION = \"startTransition\";\n    START_TRANSITION in React ? React[START_TRANSITION](() => setState()) : setState()\n\n  However, that introduces webpack/terser minification issues in production builds\n  in React 18 where minification/obfuscation ends up removing the call of\n  React.startTransition entirely from the first half of the ternary.  Grabbing\n  this exported reference once up front resolves that issue.\n\n  See https://github.com/remix-run/react-router/issues/10579\n*/\nconst START_TRANSITION = \"startTransition\";\nconst startTransitionImpl = React[START_TRANSITION];\nconst FLUSH_SYNC = \"flushSync\";\nconst flushSyncImpl = ReactDOM[FLUSH_SYNC];\n\nfunction startTransitionSafe(cb: () => void) {\n  if (startTransitionImpl) {\n    startTransitionImpl(cb);\n  } else {\n    cb();\n  }\n}\n\nfunction flushSyncSafe(cb: () => void) {\n  if (flushSyncImpl) {\n    flushSyncImpl(cb);\n  } else {\n    cb();\n  }\n}\n\ninterface ViewTransition {\n  finished: Promise<void>;\n  ready: Promise<void>;\n  updateCallbackDone: Promise<void>;\n  skipTransition(): void;\n}\n\nclass Deferred<T> {\n  status: \"pending\" | \"resolved\" | \"rejected\" = \"pending\";\n  promise: Promise<T>;\n  // @ts-expect-error - no initializer\n  resolve: (value: T) => void;\n  // @ts-expect-error - no initializer\n  reject: (reason?: unknown) => void;\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = (value) => {\n        if (this.status === \"pending\") {\n          this.status = \"resolved\";\n          resolve(value);\n        }\n      };\n      this.reject = (reason) => {\n        if (this.status === \"pending\") {\n          this.status = \"rejected\";\n          reject(reason);\n        }\n      };\n    });\n  }\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n  future,\n}: RouterProviderProps): React.ReactElement {\n  let [state, setStateImpl] = React.useState(router.state);\n  let [pendingState, setPendingState] = React.useState<RouterState>();\n  let [vtContext, setVtContext] = React.useState<ViewTransitionContextObject>({\n    isTransitioning: false,\n  });\n  let [renderDfd, setRenderDfd] = React.useState<Deferred<void>>();\n  let [transition, setTransition] = React.useState<ViewTransition>();\n  let [interruption, setInterruption] = React.useState<{\n    state: RouterState;\n    currentLocation: Location;\n    nextLocation: Location;\n  }>();\n  let fetcherData = React.useRef<Map<string, any>>(new Map());\n  let { v7_startTransition } = future || {};\n\n  let optInStartTransition = React.useCallback(\n    (cb: () => void) => {\n      if (v7_startTransition) {\n        startTransitionSafe(cb);\n      } else {\n        cb();\n      }\n    },\n    [v7_startTransition]\n  );\n\n  let setState = React.useCallback<RouterSubscriber>(\n    (\n      newState: RouterState,\n      {\n        deletedFetchers,\n        unstable_flushSync: flushSync,\n        unstable_viewTransitionOpts: viewTransitionOpts,\n      }\n    ) => {\n      deletedFetchers.forEach((key) => fetcherData.current.delete(key));\n      newState.fetchers.forEach((fetcher, key) => {\n        if (fetcher.data !== undefined) {\n          fetcherData.current.set(key, fetcher.data);\n        }\n      });\n\n      let isViewTransitionUnavailable =\n        router.window == null ||\n        typeof router.window.document.startViewTransition !== \"function\";\n\n      // If this isn't a view transition or it's not available in this browser,\n      // just update and be done with it\n      if (!viewTransitionOpts || isViewTransitionUnavailable) {\n        if (flushSync) {\n          flushSyncSafe(() => setStateImpl(newState));\n        } else {\n          optInStartTransition(() => setStateImpl(newState));\n        }\n        return;\n      }\n\n      // flushSync + startViewTransition\n      if (flushSync) {\n        // Flush through the context to mark DOM elements as transition=ing\n        flushSyncSafe(() => {\n          // Cancel any pending transitions\n          if (transition) {\n            renderDfd && renderDfd.resolve();\n            transition.skipTransition();\n          }\n          setVtContext({\n            isTransitioning: true,\n            flushSync: true,\n            currentLocation: viewTransitionOpts.currentLocation,\n            nextLocation: viewTransitionOpts.nextLocation,\n          });\n        });\n\n        // Update the DOM\n        let t = router.window!.document.startViewTransition(() => {\n          flushSyncSafe(() => setStateImpl(newState));\n        });\n\n        // Clean up after the animation completes\n        t.finished.finally(() => {\n          flushSyncSafe(() => {\n            setRenderDfd(undefined);\n            setTransition(undefined);\n            setPendingState(undefined);\n            setVtContext({ isTransitioning: false });\n          });\n        });\n\n        flushSyncSafe(() => setTransition(t));\n        return;\n      }\n\n      // startTransition + startViewTransition\n      if (transition) {\n        // Interrupting an in-progress transition, cancel and let everything flush\n        // out, and then kick off a new transition from the interruption state\n        renderDfd && renderDfd.resolve();\n        transition.skipTransition();\n        setInterruption({\n          state: newState,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      } else {\n        // Completed navigation update with opted-in view transitions, let 'er rip\n        setPendingState(newState);\n        setVtContext({\n          isTransitioning: true,\n          flushSync: false,\n          currentLocation: viewTransitionOpts.currentLocation,\n          nextLocation: viewTransitionOpts.nextLocation,\n        });\n      }\n    },\n    [router.window, transition, renderDfd, fetcherData, optInStartTransition]\n  );\n\n  // Need to use a layout effect here so we are subscribed early enough to\n  // pick up on any render-driven redirects/navigations (useEffect/<Navigate>)\n  React.useLayoutEffect(() => router.subscribe(setState), [router, setState]);\n\n  // When we start a view transition, create a Deferred we can use for the\n  // eventual \"completed\" render\n  React.useEffect(() => {\n    if (vtContext.isTransitioning && !vtContext.flushSync) {\n      setRenderDfd(new Deferred<void>());\n    }\n  }, [vtContext]);\n\n  // Once the deferred is created, kick off startViewTransition() to update the\n  // DOM and then wait on the Deferred to resolve (indicating the DOM update has\n  // happened)\n  React.useEffect(() => {\n    if (renderDfd && pendingState && router.window) {\n      let newState = pendingState;\n      let renderPromise = renderDfd.promise;\n      let transition = router.window.document.startViewTransition(async () => {\n        optInStartTransition(() => setStateImpl(newState));\n        await renderPromise;\n      });\n      transition.finished.finally(() => {\n        setRenderDfd(undefined);\n        setTransition(undefined);\n        setPendingState(undefined);\n        setVtContext({ isTransitioning: false });\n      });\n      setTransition(transition);\n    }\n  }, [optInStartTransition, pendingState, renderDfd, router.window]);\n\n  // When the new location finally renders and is committed to the DOM, this\n  // effect will run to resolve the transition\n  React.useEffect(() => {\n    if (\n      renderDfd &&\n      pendingState &&\n      state.location.key === pendingState.location.key\n    ) {\n      renderDfd.resolve();\n    }\n  }, [renderDfd, transition, state.location, pendingState]);\n\n  // If we get interrupted with a new navigation during a transition, we skip\n  // the active transition, let it cleanup, then kick it off again here\n  React.useEffect(() => {\n    if (!vtContext.isTransitioning && interruption) {\n      setPendingState(interruption.state);\n      setVtContext({\n        isTransitioning: true,\n        flushSync: false,\n        currentLocation: interruption.currentLocation,\n        nextLocation: interruption.nextLocation,\n      });\n      setInterruption(undefined);\n    }\n  }, [vtContext.isTransitioning, interruption]);\n\n  React.useEffect(() => {\n    warning(\n      fallbackElement == null || !router.future.v7_partialHydration,\n      \"`<RouterProvider fallbackElement>` is deprecated when using \" +\n        \"`v7_partialHydration`, use a `HydrateFallback` component instead\"\n    );\n    // Only log this once on initial mount\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  let dataRouterContext = React.useMemo(\n    () => ({\n      router,\n      navigator,\n      static: false,\n      basename,\n    }),\n    [router, navigator, basename]\n  );\n\n  // The fragment and {null} here are important!  We need them to keep React 18's\n  // useId happy when we are server-rendering since we may have a <script> here\n  // containing the hydrated server-side staticContext (from StaticRouterProvider).\n  // useId relies on the component tree structure to generate deterministic id's\n  // so we need to ensure it remains the same on the client even though\n  // we don't need the <script> tag\n  return (\n    <>\n      <DataRouterContext.Provider value={dataRouterContext}>\n        <DataRouterStateContext.Provider value={state}>\n          <FetchersContext.Provider value={fetcherData.current}>\n            <ViewTransitionContext.Provider value={vtContext}>\n              <Router\n                basename={basename}\n                location={state.location}\n                navigationType={state.historyAction}\n                navigator={navigator}\n                future={{\n                  v7_relativeSplatPath: router.future.v7_relativeSplatPath,\n                }}\n              >\n                {state.initialized || router.future.v7_partialHydration ? (\n                  <DataRoutes\n                    routes={router.routes}\n                    future={router.future}\n                    state={state}\n                  />\n                ) : (\n                  fallbackElement\n                )}\n              </Router>\n            </ViewTransitionContext.Provider>\n          </FetchersContext.Provider>\n        </DataRouterStateContext.Provider>\n      </DataRouterContext.Provider>\n      {null}\n    </>\n  );\n}\n\nfunction DataRoutes({\n  routes,\n  future,\n  state,\n}: {\n  routes: DataRouteObject[];\n  future: RemixRouter[\"future\"];\n  state: RouterState;\n}): React.ReactElement | null {\n  return useRoutesImpl(routes, undefined, state, future);\n}\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  future,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: Partial<FutureConfig>;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({\n  basename,\n  children,\n  future,\n  window,\n}: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  future?: FutureConfig;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({\n  basename,\n  children,\n  future,\n  history,\n}: HistoryRouterProps) {\n  let [state, setStateImpl] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n  let { v7_startTransition } = future || {};\n  let setState = React.useCallback(\n    (newState: { action: NavigationType; location: Location }) => {\n      v7_startTransition && startTransitionImpl\n        ? startTransitionImpl(() => setStateImpl(newState))\n        : setStateImpl(newState);\n    },\n    [setStateImpl, v7_startTransition]\n  );\n\n  React.useLayoutEffect(() => history.listen(setState), [history, setState]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n      future={future}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n  unstable_viewTransition?: boolean;\n}\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\n/**\n * The public API for rendering a history-aware `<a>`.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...rest\n    },\n    ref\n  ) {\n    let { basename } = React.useContext(NavigationContext);\n\n    // Rendered into <a href> for absolute URLs\n    let absoluteHref;\n    let isExternal = false;\n\n    if (typeof to === \"string\" && ABSOLUTE_URL_REGEX.test(to)) {\n      // Render the absolute href server- and client-side\n      absoluteHref = to;\n\n      // Only check for external origins client-side\n      if (isBrowser) {\n        try {\n          let currentUrl = new URL(window.location.href);\n          let targetUrl = to.startsWith(\"//\")\n            ? new URL(currentUrl.protocol + to)\n            : new URL(to);\n          let path = stripBasename(targetUrl.pathname, basename);\n\n          if (targetUrl.origin === currentUrl.origin && path != null) {\n            // Strip the protocol/origin/basename for same-origin absolute URLs\n            to = path + targetUrl.search + targetUrl.hash;\n          } else {\n            isExternal = true;\n          }\n        } catch (e) {\n          // We can't do external URL detection without a valid URL\n          warning(\n            false,\n            `<Link to=\"${to}\"> contains an invalid URL which will probably break ` +\n              `when clicked - please update to a valid URL path.`\n          );\n        }\n      }\n    }\n\n    // Rendered into <a href> for relative URLs\n    let href = useHref(to, { relative });\n\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={absoluteHref || href}\n        onClick={isExternal || reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\ntype NavLinkRenderProps = {\n  isActive: boolean;\n  isPending: boolean;\n  isTransitioning: boolean;\n};\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?: React.ReactNode | ((props: NavLinkRenderProps) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?: string | ((props: NavLinkRenderProps) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: NavLinkRenderProps) => React.CSSProperties | undefined);\n}\n\n/**\n * A `<Link>` wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      unstable_viewTransition,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n    let isTransitioning =\n      routerState != null &&\n      // Conditional usage is OK here because the usage of a data router is static\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useViewTransitionState(path) &&\n      unstable_viewTransition === true;\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    // If the `to` has a trailing slash, look at that exact spot.  Otherwise,\n    // we're looking for a slash _after_ what's in `to`.  For example:\n    //\n    // <NavLink to=\"/users\"> and <NavLink to=\"/users/\">\n    // both want to look for a / at index 6 to match URL `/users/matt`\n    const endSlashPosition =\n      toPathname !== \"/\" && toPathname.endsWith(\"/\")\n        ? toPathname.length - 1\n        : toPathname.length;\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(endSlashPosition) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let renderProps = {\n      isActive,\n      isPending,\n      isTransitioning,\n    };\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp(renderProps);\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n        isTransitioning ? \"transitioning\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\" ? styleProp(renderProps) : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n        unstable_viewTransition={unstable_viewTransition}\n      >\n        {typeof children === \"function\" ? children(renderProps) : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FetcherFormProps\n  extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: HTMLFormMethod;\n\n  /**\n   * `<form encType>` - enhancing beyond the normal string type and limiting\n   * to the built-in browser supported values\n   */\n  encType?:\n    | \"application/x-www-form-urlencoded\"\n    | \"multipart/form-data\"\n    | \"text/plain\";\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * Prevent the scroll position from resetting to the top of the viewport on\n   * completion of the navigation when using the <ScrollRestoration> component\n   */\n  preventScrollReset?: boolean;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\nexport interface FormProps extends FetcherFormProps {\n  /**\n   * Indicate a specific fetcherKey to use when using navigate=false\n   */\n  fetcherKey?: string;\n\n  /**\n   * navigate=false will use a fetcher instead of a navigation\n   */\n  navigate?: boolean;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * State object to add to the history stack entry for this navigation\n   */\n  state?: any;\n\n  /**\n   * Enable view transitions on this Form navigation\n   */\n  unstable_viewTransition?: boolean;\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (\n    {\n      fetcherKey,\n      navigate,\n      reloadDocument,\n      replace,\n      state,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      relative,\n      preventScrollReset,\n      unstable_viewTransition,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmit();\n    let formAction = useFormAction(action, { relative });\n    let formMethod: HTMLFormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as HTMLFormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        fetcherKey,\n        method: submitMethod,\n        navigate,\n        replace,\n        state,\n        relative,\n        preventScrollReset,\n        unstable_viewTransition,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmit = \"useSubmit\",\n  UseSubmitFetcher = \"useSubmitFetcher\",\n  UseFetcher = \"useFetcher\",\n  useViewTransitionState = \"useViewTransitionState\",\n}\n\nenum DataRouterStateHook {\n  UseFetcher = \"useFetcher\",\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\n// Internal hooks\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n// External hooks\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n    unstable_viewTransition,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n    unstable_viewTransition?: boolean;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, {\n          replace,\n          state,\n          preventScrollReset,\n          relative,\n          unstable_viewTransition,\n        });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n      unstable_viewTransition,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n  let hasSetSearchParamsRef = React.useRef(false);\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      // Only merge in the defaults if we haven't yet called setSearchParams.\n      // Once we call that we want those to take precedence, otherwise you can't\n      // remove a param with setSearchParams({}) if it has an initial value\n      getSearchParamsForLocation(\n        location.search,\n        hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      hasSetSearchParamsRef.current = true;\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\nexport type SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Submits a fetcher `<form>` to the server without reloading the page.\n */\nexport interface FetcherSubmitFunction {\n  (\n    target: SubmitTarget,\n    // Fetchers cannot replace or set state because they are not navigation events\n    options?: Omit<SubmitOptions, \"replace\" | \"state\">\n  ): void;\n}\n\nfunction validateClientSideSubmission() {\n  if (typeof document === \"undefined\") {\n    throw new Error(\n      \"You are calling submit during the server render. \" +\n        \"Try calling submit within a `useEffect` or callback instead.\"\n    );\n  }\n}\n\nlet fetcherId = 0;\nlet getUniqueFetcherId = () => `__${String(++fetcherId)}__`;\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmit);\n  let { basename } = React.useContext(NavigationContext);\n  let currentRouteId = useRouteId();\n\n  return React.useCallback<SubmitFunction>(\n    (target, options = {}) => {\n      validateClientSideSubmission();\n\n      let { action, method, encType, formData, body } = getFormSubmissionInfo(\n        target,\n        basename\n      );\n\n      if (options.navigate === false) {\n        let key = options.fetcherKey || getUniqueFetcherId();\n        router.fetch(key, currentRouteId, options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          unstable_flushSync: options.unstable_flushSync,\n        });\n      } else {\n        router.navigate(options.action || action, {\n          preventScrollReset: options.preventScrollReset,\n          formData,\n          body,\n          formMethod: options.method || (method as HTMLFormMethod),\n          formEncType: options.encType || (encType as FormEncType),\n          replace: options.replace,\n          state: options.state,\n          fromRouteId: currentRouteId,\n          unstable_flushSync: options.unstable_flushSync,\n          unstable_viewTransition: options.unstable_viewTransition,\n        });\n      }\n    },\n    [router, basename, currentRouteId]\n  );\n}\n\n// v7: Eventually we should deprecate this entirely in favor of using the\n// router method directly?\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // If no action was specified, browsers will persist current search params\n  // when determining the path, so match that behavior\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to this directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    path.search = location.search;\n\n    // When grabbing search params from the URL, remove any included ?index param\n    // since it might not apply to our contextual route.  We add it back based\n    // on match.route.index below\n    let params = new URLSearchParams(path.search);\n    if (params.has(\"index\") && params.get(\"index\") === \"\") {\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: React.ForwardRefExoticComponent<\n    FetcherFormProps & React.RefAttributes<HTMLFormElement>\n  >;\n  submit: FetcherSubmitFunction;\n  load: (href: string, opts?: { unstable_flushSync?: boolean }) => void;\n};\n\n// TODO: (v7) Change the useFetcher generic default from `any` to `unknown`\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>({\n  key,\n}: { key?: string } = {}): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n  let state = useDataRouterState(DataRouterStateHook.UseFetcher);\n  let fetcherData = React.useContext(FetchersContext);\n  let route = React.useContext(RouteContext);\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n\n  invariant(fetcherData, `useFetcher must be used inside a FetchersContext`);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  // Fetcher key handling\n  let [fetcherKey, setFetcherKey] = React.useState<string>(key || \"\");\n  if (key && key !== fetcherKey) {\n    setFetcherKey(key);\n  } else if (!fetcherKey) {\n    setFetcherKey(getUniqueFetcherId());\n  }\n\n  // Registration/cleanup\n  React.useEffect(() => {\n    router.getFetcher(fetcherKey);\n    return () => {\n      // Tell the router we've unmounted - if v7_fetcherPersist is enabled this\n      // will not delete immediately but instead queue up a delete after the\n      // fetcher returns to an `idle` state\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  // Fetcher additions\n  let load = React.useCallback(\n    (href: string, opts?: { unstable_flushSync?: boolean }) => {\n      invariant(routeId, \"No routeId available for fetcher.load()\");\n      router.fetch(fetcherKey, routeId, href, opts);\n    },\n    [fetcherKey, routeId, router]\n  );\n\n  let submitImpl = useSubmit();\n  let submit = React.useCallback<FetcherSubmitFunction>(\n    (target, opts) => {\n      submitImpl(target, {\n        ...opts,\n        navigate: false,\n        fetcherKey,\n      });\n    },\n    [fetcherKey, submitImpl]\n  );\n\n  let FetcherForm = React.useMemo(() => {\n    let FetcherForm = React.forwardRef<HTMLFormElement, FetcherFormProps>(\n      (props, ref) => {\n        return (\n          <Form {...props} navigate={false} fetcherKey={fetcherKey} ref={ref} />\n        );\n      }\n    );\n    if (__DEV__) {\n      FetcherForm.displayName = \"fetcher.Form\";\n    }\n    return FetcherForm;\n  }, [fetcherKey]);\n\n  // Exposed FetcherWithComponents\n  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;\n  let data = fetcherData.get(fetcherKey);\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form: FetcherForm,\n      submit,\n      load,\n      ...fetcher,\n      data,\n    }),\n    [FetcherForm, submit, load, fetcher, data]\n  );\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): (Fetcher & { key: string })[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return Array.from(state.fetchers.entries()).map(([key, fetcher]) => ({\n    ...fetcher,\n    key,\n  }));\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let { basename } = React.useContext(NavigationContext);\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on pagehide\n  usePageHide(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      try {\n        sessionStorage.setItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n          JSON.stringify(savedScrollPositions)\n        );\n      } catch (error) {\n        warning(\n          false,\n          `Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (${error}).`\n        );\n      }\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let getKeyWithoutBasename: GetScrollRestorationKeyFunction | undefined =\n        getKey && basename !== \"/\"\n          ? (location, matches) =>\n              getKey(\n                // Strip the basename to match useLocation()\n                {\n                  ...location,\n                  pathname:\n                    stripBasename(location.pathname, basename) ||\n                    location.pathname,\n                },\n                matches\n              )\n          : getKey;\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKeyWithoutBasename\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, basename, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(\n          decodeURIComponent(location.hash.slice(1))\n        );\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Don't reset if this navigation opted out\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"beforeunload\", callback, opts);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Setup a callback to be fired on the window's `pagehide` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.  This event is better supported than beforeunload across browsers.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nfunction usePageHide(\n  callback: (event: PageTransitionEvent) => any,\n  options?: { capture?: boolean }\n): void {\n  let { capture } = options || {};\n  React.useEffect(() => {\n    let opts = capture != null ? { capture } : undefined;\n    window.addEventListener(\"pagehide\", callback, opts);\n    return () => {\n      window.removeEventListener(\"pagehide\", callback, opts);\n    };\n  }, [callback, capture]);\n}\n\n/**\n * Wrapper around useBlocker to show a window.confirm prompt to users instead\n * of building a custom UI with useBlocker.\n *\n * Warning: This has *a lot of rough edges* and behaves very differently (and\n * very incorrectly in some cases) across browsers if user click addition\n * back/forward navigations while the confirm is open.  Use at your own risk.\n */\nfunction usePrompt({\n  when,\n  message,\n}: {\n  when: boolean | BlockerFunction;\n  message: string;\n}) {\n  let blocker = useBlocker(when);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\") {\n      let proceed = window.confirm(message);\n      if (proceed) {\n        // This timeout is needed to avoid a weird \"race\" on POP navigations\n        // between the `window.history` revert navigation and the result of\n        // `window.confirm`\n        setTimeout(blocker.proceed, 0);\n      } else {\n        blocker.reset();\n      }\n    }\n  }, [blocker, message]);\n\n  React.useEffect(() => {\n    if (blocker.state === \"blocked\" && !when) {\n      blocker.reset();\n    }\n  }, [blocker, when]);\n}\n\nexport { usePrompt as unstable_usePrompt };\n\n/**\n * Return a boolean indicating if there is an active view transition to the\n * given href.  You can use this value to render CSS classes or viewTransitionName\n * styles onto your elements\n *\n * @param href The destination href\n * @param [opts.relative] Relative routing type (\"route\" | \"path\")\n */\nfunction useViewTransitionState(\n  to: To,\n  opts: { relative?: RelativeRoutingType } = {}\n) {\n  let vtContext = React.useContext(ViewTransitionContext);\n\n  invariant(\n    vtContext != null,\n    \"`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  \" +\n      \"Did you accidentally import `RouterProvider` from `react-router`?\"\n  );\n\n  let { basename } = useDataRouterContext(\n    DataRouterHook.useViewTransitionState\n  );\n  let path = useResolvedPath(to, { relative: opts.relative });\n  if (!vtContext.isTransitioning) {\n    return false;\n  }\n\n  let currentPath =\n    stripBasename(vtContext.currentLocation.pathname, basename) ||\n    vtContext.currentLocation.pathname;\n  let nextPath =\n    stripBasename(vtContext.nextLocation.pathname, basename) ||\n    vtContext.nextLocation.pathname;\n\n  // Transition is active if we're going to or coming from the indicated\n  // destination.  This ensures that other PUSH navigations that reverse\n  // an indicated transition apply.  I.e., on the list view you have:\n  //\n  //   <NavLink to=\"/details/1\" unstable_viewTransition>\n  //\n  // If you click the breadcrumb back to the list view:\n  //\n  //   <NavLink to=\"/list\" unstable_viewTransition>\n  //\n  // We should apply the transition because it's indicated as active going\n  // from /list -> /details/1 and therefore should be active on the reverse\n  // (even though this isn't strictly a POP reverse)\n  return (\n    matchPath(path.pathname, nextPath) != null ||\n    matchPath(path.pathname, currentPath) != null\n  );\n}\n\nexport { useViewTransitionState as unstable_useViewTransitionState };\n\n//#endregion\n", "/**\n * React Router DOM v6.21.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\n'use strict';\n\n/* eslint-env node */\n\nif (process.env.NODE_ENV === \"production\") {\n  module.exports = require(\"./umd/react-router-dom.production.min.js\");\n} else {\n  module.exports = require(\"./umd/react-router-dom.development.js\");\n}\n"],
  "mappings": "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",
  "names": ["defaultMethod", "defaultEncType", "isHtmlElement", "object", "tagName", "isButtonElement", "toLowerCase", "isFormElement", "isInputElement", "isModifiedEvent", "event", "metaKey", "altKey", "ctrlKey", "shiftKey", "shouldProcessLinkClick", "target", "button", "createSearchParams", "init", "URLSearchParams", "Array", "isArray", "Object", "keys", "reduce", "memo", "key", "value", "concat", "map", "v", "getSearchParamsForLocation", "locationSearch", "defaultSearchParams", "searchParams", "forEach", "_", "has", "getAll", "append", "_formDataSupportsSubmitter", "isFormDataSubmitterSupported", "FormData", "document", "createElement", "e", "supportedFormEncTypes", "Set", "getFormEncType", "encType", "warning", "getFormSubmissionInfo", "basename", "method", "action", "formData", "body", "attr", "getAttribute", "stripBasename", "type", "form", "Error", "name", "prefix", "undefined", "createBrowserRouter", "routes", "opts", "createRouter", "future", "_extends", "v7_prependBasename", "history", "createBrowserHistory", "window", "hydrationData", "parseHydrationData", "mapRouteProperties", "initialize", "createHashRouter", "createHashHistory", "_window", "state", "__staticRouterHydrationData", "errors", "deserializeErrors", "entries", "serialized", "val", "__type", "ErrorResponseImpl", "status", "statusText", "data", "internal", "__subType", "ErrorConstructor", "error", "message", "stack", "ViewTransitionContext", "React", "createContext", "isTransitioning", "displayName", "FetchersContext", "Map", "START_TRANSITION", "startTransitionImpl", "FLUSH_SYNC", "flushSyncImpl", "ReactDOM", "startTransitionSafe", "cb", "flushSyncSafe", "Deferred", "constructor", "promise", "Promise", "resolve", "reject", "reason", "RouterProvider", "_ref", "fallbackElement", "router", "setStateImpl", "useState", "pendingState", "setPendingState", "vtContext", "setVtContext", "renderDfd", "setRenderDfd", "transition", "setTransition", "interruption", "setInterruption", "fetcherData", "useRef", "v7_startTransition", "optInStartTransition", "useCallback", "setState", "newState", "_ref2", "deletedFetchers", "unstable_flushSync", "flushSync", "unstable_viewTransitionOpts", "viewTransitionOpts", "current", "delete", "fetchers", "fetcher", "set", "isViewTransitionUnavailable", "startViewTransition", "skipTransition", "currentLocation", "nextLocation", "t", "finished", "finally", "useLayoutEffect", "subscribe", "useEffect", "renderPromise", "location", "v7_partialHydration", "navigator", "useMemo", "createHref", "encodeLocation", "go", "n", "navigate", "push", "to", "preventScrollReset", "replace", "dataRouterContext", "static", "Fragment", "DataRouterContext", "Provider", "DataRouterStateContext", "Router", "navigationType", "historyAction", "v7_relativeSplatPath", "initialized", "DataRoutes", "_ref3", "useRoutesImpl", "BrowserRouter", "_ref4", "children", "historyRef", "v5Compat", "listen", "HashRouter", "_ref5", "HistoryRouter", "_ref6", "isBrowser", "ABSOLUTE_URL_REGEX", "Link", "forwardRef", "LinkWithRef", "_ref7", "ref", "onClick", "relative", "reloadDocument", "unstable_viewTransition", "rest", "_objectWithoutPropertiesLoose", "_excluded", "useContext", "NavigationContext", "absoluteHref", "isExternal", "test", "currentUrl", "URL", "href", "targetUrl", "startsWith", "protocol", "path", "pathname", "origin", "search", "hash", "useHref", "internalOnClick", "useLinkClickHandler", "handleClick", "defaultPrevented", "NavLink", "NavLinkWithRef", "_ref8", "ariaCurrentProp", "caseSensitive", "className", "classNameProp", "end", "style", "styleProp", "_excluded2", "useResolvedPath", "useLocation", "routerState", "useViewTransitionState", "toPathname", "locationPathname", "nextLocationPathname", "navigation", "endSlashPosition", "endsWith", "length", "isActive", "charAt", "isPending", "renderProps", "ariaCurrent", "filter", "Boolean", "join", "Form", "_ref9", "forwardedRef", "fetcherKey", "onSubmit", "props", "_excluded3", "submit", "useSubmit", "formAction", "useFormAction", "formMethod", "submitHandler", "preventDefault", "submitter", "nativeEvent", "submitMethod", "currentTarget", "ScrollRestoration", "_ref10", "getKey", "storageKey", "useScrollRestoration", "DataRouterHook", "DataRouterStateHook", "getDataRouterConsoleError", "hookName", "useDataRouterContext", "ctx", "invariant", "useDataRouterState", "_temp", "replaceProp", "useNavigate", "createPath", "useSearchParams", "defaultInit", "defaultSearchParamsRef", "hasSetSearchParamsRef", "setSearchParams", "nextInit", "navigateOptions", "newSearchParams", "validateClientSideSubmission", "fetcherId", "getUniqueFetcherId", "String", "UseSubmit", "currentRouteId", "useRouteId", "options", "fetch", "formEncType", "fromRouteId", "_temp2", "routeContext", "RouteContext", "match", "matches", "slice", "params", "get", "toString", "route", "index", "joinPaths", "useFetcher", "_temp3", "_route$matches", "UseFetcher", "routeId", "id", "setFetcherKey", "getFetcher", "deleteFetcher", "load", "submitImpl", "FetcherForm", "IDLE_FETCHER", "fetcherWithComponents", "useFetchers", "UseFetchers", "from", "_ref11", "SCROLL_RESTORATION_STORAGE_KEY", "savedScrollPositions", "_temp4", "UseScrollRestoration", "restoreScrollPosition", "useMatches", "useNavigation", "scrollRestoration", "usePageHide", "scrollY", "sessionStorage", "setItem", "JSON", "stringify", "sessionPositions", "getItem", "parse", "getKeyWithoutBasename", "disableScrollRestoration", "enableScrollRestoration", "scrollTo", "el", "getElementById", "decodeURIComponent", "scrollIntoView", "useBeforeUnload", "callback", "capture", "addEventListener", "removeEventListener", "usePrompt", "_ref12", "when", "blocker", "useBlocker", "proceed", "confirm", "setTimeout", "reset", "currentPath", "nextPath", "matchPath", "require_main"]
}
